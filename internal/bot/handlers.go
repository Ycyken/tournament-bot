// `internal/bot/handlers.go`
package bot

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/Ycyken/tournament-bot/internal/domain"
	tb "gopkg.in/telebot.v3"
)

func registerHandlers(bt *Bot) {
	bot := bt.bot
	bot.Handle("/start", func(c tb.Context) error {
		return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", mainMenu())
	})

	bot.Handle(tb.OnCallback, func(c tb.Context) error {
		_ = c.Respond(&tb.CallbackResponse{})

		userID := domain.TelegramUserID(c.Sender().ID)
		data := strings.TrimSpace(c.Callback().Data)
		switch data {
		case MainMenu:
			bt.setState(userID, StateMainMenu)
			return c.Edit("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", mainMenu())
		case CreateTournament:
			bt.setState(userID, StateWaitingTournamentTitle)
			return c.Edit("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:")
		case MyTournaments:
			tournaments, err := bt.svc.GetUserTournaments(userID)
			log.Println(len(tournaments))
			if err != nil {
				return c.Send("–û—à–∏–±–∫–∞: " + err.Error())
			}
			return editTournamentsPage(c, tournaments, 0)
		case ListTournaments:
			tournaments, err := bt.svc.GetTournaments()
			if err != nil {
				return c.Send("–û—à–∏–±–∫–∞: " + err.Error())
			}
			return allTournamentsPage(c, tournaments, 0)
		}

		if strings.HasPrefix(data, "myts_page_") {
			pageStr := strings.TrimPrefix(data, "myts_page_")
			page, err := strconv.Atoi(pageStr)
			if err != nil || page < 0 {
				page = 0
			}
			tournaments, err := bt.svc.GetUserTournaments(userID)
			if err != nil {
				return c.Send("–û—à–∏–±–∫–∞: " + err.Error())
			}
			return editTournamentsPage(c, tournaments, page)
		}

		if strings.HasPrefix(data, "allts_page_") {
			pageStr := strings.TrimPrefix(data, "allts_page_")
			page, err := strconv.Atoi(pageStr)
			if err != nil || page < 0 {
				page = 0
			}

			list, err := bt.svc.GetTournaments()
			if err != nil {
				return c.Send("–û—à–∏–±–∫–∞: " + err.Error())
			}
			return allTournamentsPage(c, list, page)
		}

		if strings.HasPrefix(data, "app_approve_") {
			parts := strings.Split(strings.TrimPrefix(data, "app_approve_"), "_")
			if len(parts) != 2 {
				return c.Send("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏")
			}

			tID64, err1 := strconv.Atoi(parts[0])
			tgID64, err2 := strconv.Atoi(parts[1])
			if err1 != nil || err2 != nil {
				return c.Send("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç tgID –∏–ª–∏ tournamentID")
			}

			tID := domain.TournamentID(tID64)
			tgID := domain.TelegramUserID(tgID64)

			app, err := bt.svc.GetApplication(tID, tgID)
			if err != nil {
				return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: " + err.Error())
			}
			t, _ := bt.svc.GetTournament(tID)

			tag := ""
			if app.TelegramTag != nil {
				tag = "(@" + *app.TelegramTag + ")"
			}

			if err := bt.svc.ApproveApplication(tID, tgID); err != nil {
				return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏: " + err.Error())
			}

			_ = c.Send(fmt.Sprintf("‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s%s –Ω–∞ —Ç—É—Ä–Ω–∏—Ä ¬´%s¬ª –æ–¥–æ–±—Ä–µ–Ω–∞!", app.Name, tag, t.Title))

			apps, err := bt.svc.GetApplications(tID)
			if err != nil {
				return c.Send("–û—à–∏–±–∫–∞: " + err.Error())
			}
			return applicationMenu(c, t, apps)
		}

		if strings.HasPrefix(data, "app_reject_") {
			parts := strings.Split(strings.TrimPrefix(data, "app_reject_"), "_")
			if len(parts) != 2 {
				return c.Send("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏")
			}

			tID64, err1 := strconv.ParseInt(parts[0], 10, 64)
			tgID64, err2 := strconv.ParseInt(parts[1], 10, 64)
			if err1 != nil || err2 != nil {
				return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
			}

			tID := domain.TournamentID(tID64)
			tgID := domain.TelegramUserID(tgID64)

			app, err := bt.svc.GetApplication(tID, tgID)
			if err != nil {
				return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: " + err.Error())
			}
			t, _ := bt.svc.GetTournament(tID)

			tag := ""
			if app.TelegramTag != nil {
				tag = "(@" + *app.TelegramTag + ")"
			}

			if err := bt.svc.RejectApplication(tID, tgID); err != nil {
				return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: " + err.Error())
			}

			_ = c.Send(fmt.Sprintf("‚ùå –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s%s –Ω–∞ —Ç—É—Ä–Ω–∏—Ä ¬´%s¬ª –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", app.Name, tag, t.Title))

			apps, err := bt.svc.GetApplications(tID)
			if err != nil {
				return c.Send("–û—à–∏–±–∫–∞: " + err.Error())
			}
			return applicationMenu(c, t, apps)
		}

		if data == ApplySkipText {
			ac := bt.getApply(userID)
			if ac == nil {
				bt.setState(userID, StateMainMenu)
				return c.Edit("–°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", mainMenu())
			}
			app := &domain.Application{
				TournamentID:   ac.TournamentID,
				TelegramUserID: userID,
				Name:           ac.Name,
				TelegramTag:    &c.Sender().Username,
				Text:           nil,
			}
			if err := bt.svc.ApplyToTournament(app); err != nil {
				return c.Send("–û—à–∏–±–∫–∞: " + err.Error())
			}
			bt.clearApply(userID)
			bt.setState(userID, StateMainMenu)
			_ = c.Edit("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –µ—ë —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç.")
			return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", mainMenu())
		}

		if strings.HasPrefix(data, "tournament_") {
			idStr := strings.TrimPrefix(data, "tournament_")
			tID, err := strconv.Atoi(idStr)
			if err != nil {
				return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞")
			}
			t, err := bt.svc.GetTournament(domain.TournamentID(tID))
			if err != nil {
				return c.Send("–û—à–∏–±–∫–∞: " + err.Error())
			}

			tgID := domain.TelegramUserID(c.Sender().ID)
			if t.OwnerID == tgID {
				return tournamentMenu(c, t)
			}
			if t.UserParticipates(tgID) {
				return participantMenu(c, t, tgID)
			}

			bt.setState(tgID, StateApplyEnterName)
			app, err := bt.svc.GetApplication(t.ID, tgID)
			if err != nil {
				return c.Send("–û—à–∏–±–∫–∞: " + err.Error())
			}
			if app != nil {
				bt.setState(tgID, StateMainMenu)
				return c.Edit(fmt.Sprintf("–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ ¬´%s¬ª. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", t.Title))
			}
			bt.setApply(tgID, &applyCtx{TournamentID: t.ID})
			return c.Edit(fmt.Sprintf(
				"–•–æ—Ç–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ ¬´%s¬ª?\n\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë –∏–º—è:",
				t.Title,
			))
		}

		if strings.HasPrefix(data, "applications_tournament") {
			tIDStr := strings.TrimPrefix(data, "applications_tournament")
			tID64, err := strconv.Atoi(tIDStr)
			tID := domain.TournamentID(tID64)
			if err != nil {
				return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞")
			}

			apps, err := bt.svc.GetApplications(tID)
			if err != nil {
				return c.Send("–û—à–∏–±–∫–∞: " + err.Error())
			}
			t, _ := bt.svc.GetTournament(tID)

			applicationMenu(c, t, apps)
		}

		if strings.HasPrefix(data, "start_tournament") {
			tIDStr := strings.TrimPrefix(data, "start_tournament")
			tID64, err := strconv.Atoi(tIDStr)
			if err != nil {
				return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞")
			}
			tID := domain.TournamentID(tID64)
			err = bt.svc.StartTournament(tID)
			if err != nil {
				return c.Send("–û—à–∏–±–∫–∞: " + err.Error())
			}
			return c.Send(fmt.Sprintf("–¢—É—Ä–Ω–∏—Ä ID %d –Ω–∞—á–∞—Ç!", tID))
		}

		if strings.HasPrefix(data, "information_tournament") {
			tIDStr := strings.TrimPrefix(data, "information_tournament")
			tID64, err := strconv.Atoi(tIDStr)
			if err != nil {
				return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞")
			}
			tID := domain.TournamentID(tID64)
			if err != nil {
				return c.Send("–û—à–∏–±–∫–∞: " + err.Error())
			}
			t, _ := bt.svc.GetTournament(tID)

			return c.Edit(participantMenu(c, t, userID))
		}

		if strings.HasPrefix(data, "pinfo_tournament") {
			tIDStr := strings.TrimPrefix(data, "pinfo_tournament")
			tID64, err := strconv.Atoi(tIDStr)
			if err != nil {
				return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞")
			}
			t, err := bt.svc.GetTournament(domain.TournamentID(tID64))
			if err != nil {
				return c.Send("–û—à–∏–±–∫–∞: " + err.Error())
			}

			info := TournamentInfoMessage(t)

			menu := &tb.ReplyMarkup{}
			btnBack := menu.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("tournament_%d", t.ID))
			menu.Inline(menu.Row(btnBack))
			return c.Edit(info, menu)
		}

		if strings.HasPrefix(data, "pmatches_tournament") {
			rest := strings.TrimPrefix(data, "pmatches_tournament")
			parts := strings.Split(rest, "_")
			if len(parts) != 2 {
				return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏")
			}
			tID64, err1 := strconv.Atoi(parts[0])
			tgID64, err2 := strconv.Atoi(parts[1])
			if err1 != nil || err2 != nil {
				return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
			}
			tID := domain.TournamentID(tID64)
			tgID := domain.TelegramUserID(tgID64)

			t, err := bt.svc.GetTournament(tID)
			if err != nil {
				return c.Send("–û—à–∏–±–∫–∞: " + err.Error())
			}

			p := t.FindParticipantBytgID(tgID)
			text := t.GetMatchesHistory(p.ID)

			menu := &tb.ReplyMarkup{}
			btnBack := menu.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("tournament_%d", t.ID))

			matches := t.GetParticipantMatches(p.ID)
			if m := matches[len(matches)-1]; m != nil {
				winRes, loseRes := "p1", "p2"
				if m.P1 != p.ID {
					winRes, loseRes = "p2", "p1"
				}
				btnWin := menu.Data("‚úÖ –Ø –≤—ã–∏–≥—Ä–∞–ª", fmt.Sprintf("pmatch_report_%d_%d_%s", t.ID, m.ID, winRes))
				btnDraw := menu.Data("ü§ù –ù–∏—á—å—è", fmt.Sprintf("pmatch_report_%d_%d_draw", t.ID, m.ID))
				btnLose := menu.Data("‚ùå –Ø –ø—Ä–æ–∏–≥—Ä–∞–ª", fmt.Sprintf("pmatch_report_%d_%d_%s", t.ID, m.ID, loseRes))
				menu.Inline(menu.Row(btnWin, btnDraw, btnLose), menu.Row(btnBack))
			} else {
				menu.Inline(menu.Row(btnBack))
			}
			if err := c.Edit(text, menu); err != nil {
				return c.Send(text, menu)
			}
			return c.Edit(text, menu)
		}

		if strings.HasPrefix(data, "pmatch_report_") {
			rest := strings.TrimPrefix(data, "pmatch_report_")
			parts := strings.SplitN(rest, "_", 3)
			if len(parts) != 3 {
				return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏")
			}
			tID64, err1 := strconv.ParseInt(parts[0], 10, 64)
			mID64, err2 := strconv.ParseInt(parts[1], 10, 64)
			res := parts[2] // "p1" | "p2" | "draw"
			if err1 != nil || err2 != nil || (res != "p1" && res != "p2" && res != "draw") {
				return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
			}

			tID := domain.TournamentID(tID64)
			mID := domain.MatchID(mID64)
			uid := domain.TelegramUserID(c.Sender().ID)

			t, err := bt.svc.ReportMatchResult(tID, mID, uid, domain.ResultType(res))
			if err != nil {
				return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: " + err.Error())
			}

			_ = c.Send("‚úÖ –í–∞—à –æ—Ç—á—ë—Ç –æ –º–∞—Ç—á–µ –ø—Ä–∏–Ω—è—Ç.")

			p := t.FindParticipantBytgID(uid)
			text := t.GetMatchesHistory(p.ID)

			menu := &tb.ReplyMarkup{}
			btnBack := menu.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("tournament_%d", t.ID))
			menu.Inline(menu.Row(btnBack))

			if err := c.Edit(text, menu); err != nil {
				return c.Send(text, menu)
			}
			return nil
		}
		if strings.HasPrefix(data, "adm_matches_tournament") {
			tIDStr := strings.TrimPrefix(data, "adm_matches_tournament")
			tID64, err := strconv.ParseInt(tIDStr, 10, 64)
			if err != nil {
				return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞")
			}
			tID := domain.TournamentID(tID64)

			t, err := bt.svc.GetTournament(tID)
			if err != nil {
				return c.Send("–û—à–∏–±–∫–∞: " + err.Error())
			}

			text := buildCurrentMatchesText(t)
			menu := &tb.ReplyMarkup{}
			btnBack := menu.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("tournament_%d", t.ID))
			btnSet := menu.Data("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", fmt.Sprintf("adm_setresult_%d", t.ID))
			menu.Inline(menu.Row(btnSet), menu.Row(btnBack))
			return c.Edit(text, menu)
		}

		if strings.HasPrefix(data, "adm_setresult_") {
			tIDStr := strings.TrimPrefix(data, "adm_setresult_")
			tID64, err := strconv.ParseInt(tIDStr, 10, 64)
			if err != nil {
				return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞")
			}
			tID := domain.TournamentID(tID64)

			adminID := domain.TelegramUserID(c.Sender().ID)
			bt.setState(adminID, StateAdminAwaitMatchID)
			bt.setAdminCtx(adminID, &adminSetResultCtx{TournamentID: tID})

			menu := &tb.ReplyMarkup{}
			btnBack := menu.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("adm_matches_tournament%d", tID))
			menu.Inline(menu.Row(btnBack))
			return c.Edit("–í–≤–µ–¥–∏—Ç–µ ID –º–∞—Ç—á–∞ (—á–∏—Å–ª–æ):", menu)
		}

		if strings.HasPrefix(data, "adm_apply_result_") {
			rest := strings.TrimPrefix(data, "adm_apply_result_")
			parts := strings.SplitN(rest, "_", 3)
			if len(parts) != 3 {
				return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏")
			}

			tID64, err1 := strconv.ParseInt(parts[0], 10, 64)
			mID64, err2 := strconv.ParseInt(parts[1], 10, 64)
			res := parts[2]
			if err1 != nil || err2 != nil || (res != "p1" && res != "p2" && res != "draw") {
				return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
			}
			tID := domain.TournamentID(tID64)
			mID := domain.MatchID(mID64)
			adminID := domain.TelegramUserID(c.Sender().ID)

			t, err := bt.svc.SetMatchResultByAdmin(tID, mID, adminID, domain.ResultType(res))
			if err != nil {
				return c.Send("–û—à–∏–±–∫–∞: " + err.Error())
			}

			_ = c.Send("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –æ–±–Ω–æ–≤–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

			text := buildCurrentMatchesText(t)
			menu := &tb.ReplyMarkup{}
			btnBack := menu.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("tournament_%d", t.ID))
			btnSet := menu.Data("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", fmt.Sprintf("adm_setresult_%d", t.ID))
			menu.Inline(menu.Row(btnSet), menu.Row(btnBack))
			if err := c.Edit(text, menu); err != nil {
				return c.Send(text, menu)
			}
			return nil
		}

		return nil
	})

	bot.Handle(tb.OnText, func(c tb.Context) error {
		userID := domain.TelegramUserID(c.Sender().ID)
		state := bt.getState(userID)

		switch state {
		case StateWaitingTournamentTitle:
			title := c.Text()
			if strings.TrimSpace(title) == "" {
				return c.Send("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
			}
			t, err := bt.svc.CreateTournament(userID, title)
			if err != nil {
				return c.Send("–û—à–∏–±–∫–∞: " + err.Error())
			}
			bt.setState(userID, StateTournamentManagement)
			_ = c.Send(fmt.Sprintf("–¢—É—Ä–Ω–∏—Ä '%s' —Å–æ–∑–¥–∞–Ω! ID: %d", t.Title, t.ID))

			tournaments, err := bt.svc.GetUserTournaments(userID)
			if err != nil {
				return c.Send("–û—à–∏–±–∫–∞: " + err.Error())
			}

			return sendTournamentsPage(c, tournaments, 0)
		case StateApplyEnterName:
			name := strings.TrimSpace(c.Text())
			if name == "" {
				return c.Send("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")
			}
			ac := bt.getApply(userID)
			if ac == nil {
				bt.setState(userID, StateMainMenu)
				return c.Send("–°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", mainMenu())
			}
			ac.Name = name
			bt.setState(userID, StateApplyEnterText)

			menu := &tb.ReplyMarkup{}
			btnSkip := menu.Data("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", ApplySkipText)
			btnMain := menu.Data("–û—Ç–º–µ–Ω–∏—Ç—å", MainMenu)
			menu.Inline(menu.Row(btnSkip, btnMain))

			return c.Send("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.", menu)

		case StateApplyEnterText:
			text := strings.TrimSpace(c.Text())
			if text == "" {
				return c.Send("–ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–∞—Ä—É —Å–ª–æ–≤ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
			}
			ac := bt.getApply(userID)
			if ac == nil {
				bt.setState(userID, StateMainMenu)
				return c.Send("–°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", mainMenu())
			}

			app := &domain.Application{
				TournamentID:   ac.TournamentID,
				TelegramUserID: userID,
				Name:           ac.Name,
				TelegramTag:    &c.Sender().Username,
				Text:           &text,
			}
			if err := bt.svc.ApplyToTournament(app); err != nil {
				return c.Send("–û—à–∏–±–∫–∞: " + err.Error())
			}

			bt.clearApply(userID)
			bt.setState(userID, StateMainMenu)
			_ = c.Send("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –µ—ë —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç.")
			return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", mainMenu())
		case StateAdminAwaitMatchID:
			adminID := domain.TelegramUserID(c.Sender().ID)
			ctx := bt.getAdminCtx(adminID)
			if ctx == nil {
				bt.setState(adminID, StateMainMenu)
				return c.Send("–°–µ—Å—Å–∏—è –∞–¥–º–∏–Ω–∞ —Å–±—Ä–æ—à–µ–Ω–∞.", mainMenu())
			}

			mID64, err := strconv.ParseInt(strings.TrimSpace(c.Text()), 10, 64)
			if err != nil {
				return c.Send("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ ‚Äî ID –º–∞—Ç—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
			}
			mID := domain.MatchID(mID64)

			t, err := bt.svc.GetTournament(ctx.TournamentID)
			if err != nil {
				return c.Send("–û—à–∏–±–∫–∞: " + err.Error())
			}

			var match *domain.Match
			for _, ms := range t.Matches {
				for _, m := range ms {
					if m.ID == mID {
						match = m
						break
					}
				}
				if match != nil {
					break
				}
			}
			if match == nil {
				return c.Send("–ú–∞—Ç—á —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π ID.")
			}

			// —Ä–∏—Å—É–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
			menu := &tb.ReplyMarkup{}
			btnP1 := menu.Data("üèÜ –í—ã–∏–≥—Ä–∞–ª –ø–µ—Ä–≤—ã–π", fmt.Sprintf("adm_apply_result_%d_%d_p1", t.ID, mID))
			btnDraw := menu.Data("ü§ù –ù–∏—á—å—è", fmt.Sprintf("adm_apply_result_%d_%d_draw", t.ID, mID))
			btnP2 := menu.Data("üèÜ –í—ã–∏–≥—Ä–∞–ª –≤—Ç–æ—Ä–æ–π", fmt.Sprintf("adm_apply_result_%d_%d_p2", t.ID, mID))
			btnBack := menu.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("adm_matches_tournament%d", t.ID))
			menu.Inline(menu.Row(btnP1, btnDraw, btnP2), menu.Row(btnBack))

			bt.setState(adminID, StateMainMenu) // –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞
			bt.clearAdminCtx(adminID)

			return c.Send(
				fmt.Sprintf("–ú–∞—Ç—á ID %d:\nP1=%d, P2=%d.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", mID, match.P1, match.P2),
				menu,
			)
		}

		return c.Send("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∫–æ–º–∞–Ω–¥—É")
	})
}

func buildCurrentMatchesText(t *domain.Tournament) string {
	var lines []string
	lines = append(lines, fmt.Sprintf("–¢–µ–∫—É—â–∏–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ¬´%s¬ª (–†–∞—É–Ω–¥ %d):", t.Title, t.CurrentRound))
	
	name := func(id domain.ParticipantID) string {
		for _, p := range t.Participants {
			if p.ID == id {
				return p.Name
			}
		}
		return fmt.Sprintf("ID %d", id)
	}

	has := false
	if ms, ok := t.Matches[t.CurrentRound]; ok {
		for _, m := range ms {
			if m.State == domain.MatchCompleted {
				continue
			}
			has = true
			lines = append(lines, fmt.Sprintf("‚Ä¢ #%d: %s vs %s", m.ID, name(m.P1), name(m.P2)))
		}
	}
	if !has {
		lines = append(lines, "‚Äî –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π.")
	}
	return strings.Join(lines, "\n")
}
